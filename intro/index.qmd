---
title: "Cartographie th√©matique avec ojs"
subtitle: "√âcole d'√©t√© internationale, Ouidah, 2023"
author: "Nicolas Lambert, Manhamady Ouedraogo"
date: 03/08/2023
lang: fr
date-format: "DD MMM YYYY"
title-slide-attributes:
  data-background-color: black
  data-background-image: img/nice.jpg
  data-background-size: cover
  data-background-opacity: "0.5"
format:
  revealjs:
    smaller: true
    scrollable: true
    theme: [simple, custom.scss]
editor: visual
execute:
  echo: true
---

#

**Responsables p√©dagogiques**

Manhamady OUEDRAOGO (Burkina Faso) & Nicolas LAMBERT (France)

**Ont particip√© √† l'√©laboration de ce module**

Claude GRASLAND (France), Souleymane Sidi TRAORE (Mali), Malika MADELIN (France), S√©bastien REY-COYREHOURCQ (France), Vakaramoko BAMBA (C√¥te d'Ivoire), Hugues PECOUT (France), Yentougle MOUTORE (Togo), B√©n√©dicte GARNIER (France), C√¥omlan Charles HOUNTON (B√©nin), Pauline GLUSKI (France)

# Introduction

## Petite histoire de la cartographie {background-image="img/I.01.histoire.png" background-size="contain"}

Da la pr√©histoire √† nos jours

::: footer
Lambert, N., Zanin C. (2019). Mad Maps - L'Atlas qui va changer votre vision du monde (p. 144p). Armand Colin.
:::

## Les d√©buts de la dataviz

Les pionnier.e.s de la visualisation de donn√©es

::: {align="center"}
::: columns
::: {.column width="49%"}
<img src="img/Playfair1.png" style="border:none"/></img> Commercial and Political Atlas. <b>William Playfair</b> (1786)
:::

::: {.column width="49%"}
<img src="img/Nightingale.png" style="border:none"/></img> Notes on Matters Affecting the Health, Efficiency and Hospital Administration of the British Army. <b>Florence Nightingale</b> (1857)
:::
:::
:::

## La rencontre de 2 mondes

Quand la cartographie rencontre la visualisation de donn√©es statistiques

::: {align="center"}
::: columns
::: {.column width="49%"}
Carte figurative de l'instruction populaire en France (<b>Charles Dupin</b>, 1826) <img src="img/Dupin.png" style="border:none"/></img><br/>
:::

::: {.column width="49%"}
<b>Fr√®re de Montizon</b> (1830)<br/> <img src="img/Montizon.png" style="border:none"/></img> <b>Emile Cheysson</b> (1886) <img src="img/Cheysson.png" style="border:none"/></img><br/>
:::
:::

### Le <i>GOLD STANDARD</i> de la dataviz

<img src="img/Minard.png" style="border:none"/></img>

Carte Figurative des pertes successives en hommes de l'arm√©e fran√ßaise dans la campagne de Russie 1812--1813.<br/>Charles Joseph Minard (1869). <b>Minard</b> repr√©sente en 1869 les pertes colossales de l'arm√©e fran√ßaise dans la campagne de Russie au d√©but du XIXe si√®cle. Cette fameuse ¬´ carte figurative ¬ª raconte l'histoire de cette arm√©e, qui arrive √† Moscou avec moins d'un quart de son effectif de d√©part, avant de se faire √† nouveau d√©cimer sur le voyage du retour.
:::

## Bertin, 1967 (et 1973)

-   Enorme travail de synth√®se.
-   Approche plut√¥t pragmatique.
-   Pour le papier.
-   En noir et blanc.
-   Mais un travail qui reste central pour toutes celles et ceux qui travaillent sur la visualisation de donn√©es aujourd'hui.

<img src="img/semio.png" style="border:none"/></img>

## R√©volutions technologiques

<div align = "center">

::: columns
::: {.column width="49%"}
Les ordinateurs <img src="img/ordinateur.png" style="border:none"/></img>
:::

::: {.column width="49%"}
Internet <img src="img/internet.png" style="border:none"/></img>
:::
:::

::: footer
https://observablehq.com/@tophtucker/classic-research-in-data-visualization
:::

##  {background-image="img/leaflet.jpg" background-size="contain"}

::: footer
<b>Leaflet, 2010</b><br/> https://leafletjs.com/
:::

##  {background-image="img/deckgl.png" background-size="contain"}

::: footer
<b>Deck.gl, 2015</b><br/> https://deck.gl/
:::

##  {background-image="img/keplergl.png" background-size="contain"}

::: footer
<b>KeplerGL, 2018</b><br/> https://kepler.gl/
:::

##  {background-image="img/bostock2011.png" background-size="contain"}

::: footer
<b>D3.js - Mike Bostock, 2012</b><br/> https://archive.nytimes.com/www.nytimes.com/interactive/2012/02/13/us/politics/2013-budget-proposal-graphic.html
:::

##  {background-image="img/vegalite.png" background-size="contain"}

::: footer
<b>Vega-lite, 2013</b><br/> https://vega.github.io/
:::

##  {background-image="img/plot.png" background-size="contain"}

::: footer
<b>Observable Plot, 2022</b><br/> https://github.com/observablehq/plot
:::

##  {background-image="img/bertin.png" background-size="contain"}

::: footer
<b>Bertin, 2022</b><br/> https://github.com/neocarto/bertin
:::

# JavaScript

## Historique

Le JavaScript est un langage de programmation qui a presque 30 ans.

### 1995

![](img/javascript.png){height="100"}

Le langage Javascript a √©t√© cr√©√© en dix jours en mai 1995 pour la Netscape Communications Corporation par **Brendan Eich**. Au d√©part, l'id√©e √©tait de construire un petit langage pour faire des interactions sur les pages web. Attention, Javascript n'est pas JAVA !

### 1997

![](img/ecma.png){height="65"}

Le langage Javascript est normalis√© depuis 1997 par la commission TC39 de l'organisation ECMA International.

### 2008

Les navigateurs web ont travaill√© √† de nouveaux moteurs pour am√©liorer les performances. **V8** est un moteur JavaScript open-source d√©velopp√© par le projet Chromium pour les navigateurs Web Google Chrome et Chromium (derni√®re version 31 janvier 2022). Il y a aussi **SpiderMonkey** pour Firefox, **Chakra** pour Microsoft Edge et **JavaScriptCore** pour Safari.

### 2009

![](img/node.png){height="100"}

Cr√©ation de Node.js par **Ryan Dahl**, qui permet d'utiliser le JavaScript comme langage de programmation c√¥t√© serveur (back-End).

### 2015

Depuis 2015 (ES6 ou ES2015), le langage JavaScript est mature. Performant. Et est impl√©ment√© de mani√®re harmonis√©e dans tous les navigateurs. On parle de *modern JavaScript*

### demain ?

De nouvelles fonctionnalit√©es sont ajout√©es au langage chaque ann√©e.

Voir : [observablehq.com/\@robertbatty/ecmascript-2015-2022](https://observablehq.com/@robertbatty/ecmascript-2015-2022)

## Une grande communaut√©

C'est un langage ancien qui dispose d'une tr√®s grande communaut√©.

::: columns
::: {.column width="49%"}
JavaScript est √† ce jour un des langages les plus utilis√© par les developpeurs informatiques.<br/><img src="img/popularityjs.png" style="border:none"/></img><br/>
:::

::: {.column width="49%"}
Il y a √† ce jour plus de 2 millions de packages disponibles sur **npm**<br/><img src="img/npm1.png" style="border:none"/></img>
:::
:::

## Un langage souvent d√©cri√© üëé

JavaScript a souvent mauvaise r√©putation chez les d√©veloppeurs. Et pour cause :

### Des absurdit√©s logiques

Null est un objet ü§î

```{ojs}
typeof null
```

Not a Number est un nombre üôÉ

```{ojs}
typeof NaN
```

Cf [smashingmagazine.com/2011/05/10-oddities-and-secrets-about-javascript](https://www.smashingmagazine.com/2011/05/10-oddities-and-secrets-about-javascript)

### Il est faiblement typ√©

On peut donc d√©finir une variable et changer son type. Attention danger.

```{ojs}
{
let a = "bonjour"
a = 10
return a
}
```

2 variables de 2 types diff√©rents peuvent √™tre consid√©r√©s comme √©gaux.

```{ojs}
{
let a = "40"
let b = 40
return a == b
}
```

Et √ßa peut √™tre source de confusion et de bugs

```{ojs}
{
let someVar = 0
return someVar == false
}
```

Heureusement, il y a le triple √©gal

```{ojs}
{
let someVar = 0
return someVar === false
}
```

### Il n'a pas √©t√© con√ßu pour l'analyse de donn√©es

Par exemple, l'op√©ration de tri par d√©faut trie les valeurs par ordre alphab√©tique.

```{ojs}
{
let a = [7,1,9,3,10,4,5,6,2,8]
return a.sort()
}
```

## ...mais incontournable et prometeur üëç

**C'est le langage du web :**

-   Il n'y a rien √† installer *"en dur*"\* sur les ordinateurs. Il faut juste un navigateur web.
-   Il tourne partout (compilation just in time)
-   L'impl√©mentation de Javascript dans les navigateurs est de plus en plus rapide üöÄ
-   Le langage est aujourd'hui standardis√© (ECMA)
-   Grande communaut√©. Beaucoup de ressources et tutos
-   Beaucoup de choses d√©j√† d√©velopp√©es : Plus de 2 millions de packages sur npm

**Certes, JavaScript n'a pas √©t√© con√ßu pour faire de l'analyse de donn√©es. Mais :**

-   Le langage peut √™tre √©tendu pour mieux le prendre en charge.
-   De nombreuses librairies permettent d√©j√† de manipuler et repr√©senter les donn√©es.
-   Les performances s'am√©liorent encore avec WebGPU, qui permet de faire des calculs particuli√®rement efficaces pour l'execution d'algorithmes tres paralleles comme le traitement d'image, le machine learning et le rendu 3D.

![](img/webgpu.png){height="80"}

-   Avec WebAssembly, il est d√©sormais possible d'incorporer des briques d√©velopp√©es dans d'autres langages (C, rust, go...) √† l'interieur des biblioth√®ques JavaCcript.

![](img/jswasm.png){height="70"}

Du coup, certains pensent que le JavaScript est le langage de demain pour traiter et analyser des donn√©es.

![](img/towards.png)

*https://towardsdatascience.com/javascript-for-data-analysis-2e8e7dbf63a7*

# Observable Javascript

Un langage d√©di√© √† la visualisation de donn√©es pour le web

## Observable, kezako ?

L'<b>Observable javascript (ojs)</b> est un ensemble d'am√©liorations apport√©es √† vanilla JavaScript cr√©√© par Mike Bostock (√©galement auteur de D3). Observable JS se distingue par son ex√©cution r√©active, qui convient particuli√®rement bien √† l'exploration et √† l'analyse interactives des donn√©es. Objectif : faire collaborer une communaut√© autour de la visualisation de donn√©es.

![](img/chronologie.png)

<b>Observable</b> est aussi une startup fond√©e par Mike Bostock et Melody Meckfessel, qui propose une plateforme 100% en ligne pour concevoir, partager et diffuser des visualisations de donn√©es.

![](img/observable.png){height="200"}

C'est aussi une <b>plateforme web disponilble √† l'adresse **https://observablehq.com/** qui h√©berge des *notebooks*</b> *computationnels* sur la visualisation de donn√©es. Les notebooks sont comme des billets de blog. Ils contiennent du texte, des images et du contenu multim√©dia. Ils peuvent √™tre rang√©s dans des collections. Ils sont disponibles en ligne via une url. Comme on peut s'y attendre, ils contiennent aussi des lignes de code. L'objectif : faire de la Programmation lettr√©e (<b>literate programming</b>).

![](img/obs.png)

<b>R√©f√©rences</b>

Reactive, reproducible, collaborative: computational notebooks evolve, par Jeffrey M. Perkel. <https://www.nature.com/articles/d41586-021-01174-w>

Javascript for data Analysis, par Mike Bostock <https://towardsdatascience.com/javascript-for-data-analysis-2e8e7dbf63a7>

## Observable dans Quarto

Quarto¬Æ est un syst√®me de publication scientifique et technique √† code source ouvert bas√© sur Pandoc.

![](img/quarto.png){height="50"} Quarto permet de cr√©er des documents markdown, des articles, des rapports, des pr√©sentations, des sites web, des blogs et des livres, aux formats HTML, PDF, Word, ePub, etc.

Il permet de cr√©er un contenu dynamique dans diff√©rents langages : Python, R, Julia et **Observable JavaScript**.

Cela permet de cr√©er des documents, des rapports et des analyses enti√®rement reproductibles

![](img/quartoojs.png)

## Les cellules / chunk {ojs}

Dans Quarto, on peut √©crire/executer du code Observable en utilisant des chuncks **{ojs}**.

Chaque ligne d√©finit une variable et une cellule qui doit √™tre unique.

cellule 1 :

```{ojs}
a = 5 
```

cellule 2 :

```{ojs}
b = 7 
```

cellule 3 :

```{ojs}
a + b
```

Avec ojs, l'ordre d'√©criture n'a pas d'importance ü§î On peut donc √©crire :

Ceci :

```{ojs}
c * d 
```

Avant √ßa

```{ojs}
c = 3
```

et √ßa

```{ojs}
d = 8
```

La raison est que la relation entgre les cellules s'effectue de mani√®re topologique.

![](img/topo.png){height="400"}

Chaque cellule doit imp√©rativement √™tre unique. En cons√©quance, je n'ai pas le droit de red√©finir une de ces variables.

```{ojs}
e = 10
e = 5
```

Il est donc souvent utile de cr√©er des blocs de code avec des {...} quand le traitement devient plus complexe.

```{ojs}
{
  let val1 = 8;
  let val2 = 7;
  val1 = 5;
  return val1 * val2;
}

```

Mais la plupart du temps, pour faire ce genre de calcul, on √©crira plut√¥t des fonctions. Comme ceci :

```{ojs}
function sum(a, b) {
  return a + b;
}
// Appel de la fonction
sum(10, 30)
```

Ou comme cela :

```{ojs}
multi = (a, b) => a * b
// Appel de la fonction
multi(3, 8)
```

Ce parti pris fort, peut √™tre d√©routant. Mais il a un gros avantage. Il permet d'organiser un document ind√©pendemment de la fa√ßon dont on code. Cela permet par exemple de mettre une carte en haut de la page et en annexe technique tout en bas le code qui la g√©n√®re.

## D3.js

L'OJS a √©t√© cr√©√© par Mike Bostock, qui est aussi le developpeur de la biblioth√®que **D3.js** (ou D3). D3 a √©t√© dircetement int√©gr√©e √† l'Observable JavaScript.

![](img/logo-D3.png){height="200"}

D3.js est une biblioth√®que graphique JavaScript d√©velopp√©e par Mike Bostock qui permet l'affichage de donn√©es num√©riques sous une forme graphique et dynamique.

![](img/d3gallery.png)

-   D3 est populaire (200 millions de t√©l√©chargements et 100 000 ‚≠ê sur Github)
-   D3 est flexible (approche bas niveau qui permet e tout faire)
-   D3 est r√©put√© pour ses animations et ses interactions.

**Cette puissance a, bien s√ªr, un co√ªt. Il y a beaucoup √† apprendre : D3 compte plus de trente modules et un millier de m√©thodes.**

![](img/d3github.png)

Mais c'est le langage de base pour faire de la visualisation de donn√©es pour le web. La librairie `Plot` et la librairie `bertin` sont tous deux construits avec D3.

```{ojs}
myarray = [7,1,9,3,10,4,5,6,2,8]
```

**d3.array** permet de manipuler les donn√©es. On peut par exemple remplacer notre exemple de tout √† l'heure

```{ojs}
myarray.sort()
```

par :

```{ojs}
d3.sort(myarray)
```

Bien d'autres op√©rations sont possibles

```{ojs}
d3.min(myarray)
d3.max(myarray)
d3.mean(myarray)
d3.median(myarray)
d3.variance(myarray)
d3.deviation(myarray)
d3.cumsum(myarray)
```

Mais d3, c'est surtout un framework de d√©veloppement pour dessiner des visualisations √† partir de donn√©es. C'est aujourd'hui un standard dans le domaine que tout le monde utilise.

## Dessiner avec D3.js

Avec D3, il est possible de dessiner des images vectorielles au format SVG en manupilant le DOM.

*Le Document Object Model (DOM) est une interface de programmation normalis√©e par le W3C, qui permet √† des scripts d'examiner et de modifier le contenu du navigateur web. Par le DOM, la composition d'une page web est repr√©sent√©e sous forme d'un arbre avec des objets dedans.*

![](img/DOM.png)

Cr√©ons un document svg, de 500 pixels de large, 60 pixels de haut et avec du gris en couleur de fond.

```{ojs}
{
  const svg = d3
    .create("svg")
    .attr("viewBox", [0, 0, 500, 60])
    .style("background-color", "#CCC");
    
  return svg.node();
}    
```

On ajoute un cercle rouge avec `svg.append("circle")`

```{ojs}
{
  const svg = d3
    .create("svg")
    .attr("viewBox", [0, 0, 500, 60])
    .style("background-color", "#CCC");
    
  svg
    .append("circle")
    .attr("cx", 50)
    .attr("cy", 30)
    .attr("r", 25)
    .style("fill", "#e04a28");
    
  return svg.node();
}    
```

Attention, les coordonn√©es \[0,0\] sont en haut √† gauche.

![](img/canvas.png) <br/>On dessine un carr√© rouge avec `svg.append("rect")`

```{ojs}
{
  const svg = d3
    .create("svg")
    .attr("viewBox", [0, 0, 500, 60])
    .style("background-color", "#CCC");
    
  svg
    .append("rect")
    .attr("x", 100)
    .attr("y", 5)
    .attr("height", 50)
    .attr("width", 50)
    .style("fill", "#5277bf");
    
  return svg.node();
}    
```

On dessine une ligne avec `svg.append("line")`

```{ojs}
{
  const svg = d3
    .create("svg")
    .attr("viewBox", [0, 0, 500, 60])
    .style("background-color", "#CCC");
    
  svg
    .append("line")
    .attr("x1", 10)
    .attr("y1", 50)
    .attr("x2", 490)
    .attr("y2", 10)
    .style("stroke", "#5277bf");
    
  return svg.node();
}    
```

On √©crit du texte avec `svg.append("text")`

```{ojs}
{
  const svg = d3
    .create("svg")
    .attr("viewBox", [0, 0, 500, 60])
    .style("background-color", "#CCC");
    
    svg
    .append("text")
    .attr("x", 150)
    .attr("y", 30)
    .attr("text-anchor", "middle")
    .attr("alignment-baseline", "middle")
    .attr("font-size", 20)
    .text("This is a text")
    

  return svg.node();
}    
```

On peut m√™me faire des choses plus compliqu√©es

```{ojs}
{
  const svg = d3
    .create("svg")
    .attr("viewBox", [0, 0, 900, 300])
    .style("width", 900)
    .style("height", 300)
    .style("background-color", "white");

  svg
    .append("path")
    .attr("id", "MyPath")
    .attr(
      "d",
      "M 63.076304,216.52334 C 106.76999,160.0853 184.40984,142.61427 252.12247,155.01632 c 99.64554,14.70621 189.6073,65.26698 288.91023,81.72698 85.56711,17.5306 180.8469,21.86234 258.93554,-23.57809 C 832.7795,182.25763 827.06329,125.86632 794.25369,97.048457 749.49459,54.888253 680.9657,40.400439 622.07801,56.259559 578.03603,66.8154 539.24683,112.13225 552.52931,158.88503 c 11.25647,40.10204 58.40308,53.33813 95.48846,51.23085 25.59819,-1.89352 59.88192,-16.69692 56.86407,-47.47388 -3.50716,-31.7693 -26.27339,-57.34863 -59.6113,-41.94273"
    )
    .attr("fill", "none")
    .attr("stroke", "#5277bf");

  svg
    .append("text")
    .append("textPath")
    .attr("href", "#MyPath")
    .attr("dominant-baseline", "baseline")
    .attr("font-size", `48px`)
    .text(
      "Et maintenant, voici un texte qui suit une ligne. C'est trop cool, non ?"
    );

  return svg.node();
}
```

## Dessiner des donn√©es avec D3.js

On cr√©e des donn√©es fictives

```{ojs}
myData = [10, 30, 2, 20, 10]
```

On veut cr√©er des cercles. cr√©e une fonction pour calculer le rayon.

```{ojs}
valmax = d3.max(myData)
radius = d3.scaleSqrt([0, valmax], [0, 35]);
```

Puis, on dessine un SVG.

```{ojs}
{
  const width = 500;
  const height = 75;
  
  const svg = d3
    .create("svg")
    .attr("viewBox", [0, 0, width, height])

  svg
    .append("g")
    .attr("fill", "#e04a28")
    .selectAll("circle")
    .data(myData)
    .join("circle")
    .attr("cx", (d, i) => 50 + i * 100)
    .attr("cy", height / 2)
    .attr("r", (d) => radius(d));

  return svg.node();
}
```

Il est aussi possible de beaucoup d'autres choses graces aux m√©thodes propos√©es par d3.

La fonction `d3.pie()` transforme les donn√©es en un objet contenant des informations pour dessiner des quartiers.

```{ojs}
pie = d3.pie().padAngle(0.1)
pie(myData)
```

La fonction `d3.arc()` permet de dessiner ces quartiers.

```{ojs}
arc = d3.arc().innerRadius(45).outerRadius(220)
```

Ainsi, on a :

```{ojs}
{
  const height = 500;
  const svg = d3
    .create("svg")
    .attr("viewBox", [-width / 2, -height / 2, width, height]);

  svg
    .append("g")
    .attr("fill", "#e04a28")
    .attr("stroke", "#000")
    .attr("stroke-width", "1.5px")
    .attr("stroke-linejoin", "round")
    .selectAll("path")
    .data(pie(myData))
    .join("path")
    .attr("d", arc.cornerRadius(3));

  return svg.node();
}
```

## Animer avec D3.js

```{ojs}
//| echo: false
viewof anim = Inputs.button("OK", { label: "Lancer l'animation" })
```

```{ojs}
//| echo: false
{
  const svg = d3
    .create("svg")
    .attr("viewBox", [0, 0, 500, 60])
    .style("background-color", "#CCC");

  let moncercle = svg
    .append("circle")
    .attr("cx", 50)
    .attr("cy", 30)
    .attr("r", 25)
    .attr("fill", "#e04a28");

  if (anim) {
    moncercle
      .transition()
      .duration(2000)
      .attr("cx", 450)
      .transition()
      .delay(2000)
      .duration(3000)
      .attr("cx", 50)
      .attr("r", 10)
      .attr("fill", "blue")
      .transition()
      .attr("r", 25)
      .attr("fill", "#e04a28");
  }

  return svg.node();
}
```

```{ojs}
//| eval: false
{
  const svg = d3
    .create("svg")
    .attr("viewBox", [0, 0, 500, 60])
    .style("background-color", "#CCC");

  let moncercle = svg
    .append("circle")
    .attr("cx", 50)
    .attr("cy", 30)
    .attr("r", 25)
    .attr("fill", "#e04a28");

  if (anim) {
    moncercle
      .transition()
      .duration(2000)
      .attr("cx", 450)
      .transition()
      .delay(2000)
      .duration(3000)
      .attr("cx", 50)
      .attr("r", 10)
      .attr("fill", "blue")
      .transition()
      .attr("r", 25)
      .attr("fill", "#e04a28");
  }

  return svg.node();
}
```

## Les Inputs

Dans Observable, on a √† disposition des *Inputs* directement pr√™ts √† l'emploi.

### üëâ button

```{ojs}
viewof clicks = Inputs.button("Click")
clicks
```

### üëâ toogle

```{ojs}
viewof mute = Inputs.toggle({label: "Mute", value: true})
mute
```

### üëâ range

```{ojs}
viewof gain = Inputs.range([0, 11], {value: 5, step: 0.1, label: "Gain"})
gain
```

### üëâ checkbox

```{ojs}
viewof colors = Inputs.checkbox(["red", "green", "blue"], {label: "color"})
colors
```

### üëâ radio

```{ojs}
viewof color = Inputs.radio(["red", "green", "blue"], {label: "color"})
color
```

### üëâ select

```{ojs}
villes = ["Cotonou", "Porto-Novo", "Ouidah"]
viewof maville = Inputs.select(villes, {value: "steelblue", label: "Favorite color"})
maville
```

### üëâ text

```{ojs}
viewof text = Inputs.text()
text
```

### üëâ textarea

```{ojs}
viewof textarea = Inputs.textarea()
textarea
```

### üëâ date

```{ojs}
viewof date = Inputs.date()
date
```

### üëâ color

```{ojs}
viewof pickcolor = Inputs.color({label: "couleur pr√©f√©r√©e", value: "#4682b4"})
pickcolor
```

### üëâ file

```{ojs}
viewof file = Inputs.file()
file
```

### üëâ formulaire

```{ojs}
//| panel: sidebar
//| echo: false
viewof range1 = Inputs.range([0, 11], {value: 5, step: 0.1, label: "range1"})
viewof range2 = Inputs.range([0, 11], {value: 5, step: 0.1, label: "range2"})
viewof range3 = Inputs.range([0, 11], {value: 5, step: 0.1, label: "range3"})
```

```{ojs}
//| panel: fill
range1
range2
range3

```

## Tout est r√©actif üî•

Dans Observable, grace √† la relation topologique entre les cellules, tout est r√©actif. Chaque fois qu'on bouge quelque chose, ce qui en d√©pend est r√©√©x√©cut√©.

```{ojs}
viewof age = Inputs.range([15, 70], {label: "age", value: 30, step: 1,})
viewof nom = Inputs.text({label: "nom", value: "Nicolas"})
```

Par exemple :

```{ojs}
md`Je m'appelle **${nom}** et j'ai **${age}** ans :-)`
```

Reprenons notre SVG de tout √† l'heure

```{ojs}
{
  const svg = d3
    .create("svg")
    .attr("viewBox", [0, 0, 500, 60])
    .style("background-color", "#CCC");
    
  svg
    .append("circle")
    .attr("cx", 50)
    .attr("cy", 30)
    .attr("r", 25)
    .style("fill", "#e04a28");
    
  return svg.node();
}
```

On peut facilement proposer √† l'utilisateur de moidifier ce dessin en rempla√ßant des valeurs par des variables pilot√©es par des inputs.

```{ojs}
//| echo: true
//| eval: false
{
  const svg = d3
    .create("svg")
    .attr("viewBox", [0, 0, 500, 60])
    .style("background-color", "#CCC");
    
  svg
    .append("circle")
    .attr("cx", cx)
    .attr("cy", 30)
    .attr("r", r)
    .style("fill", col);
    
  return svg.node();
}
```

Par exemple :

```{ojs}
//| panel: input
//| echo: false
viewof cx = Inputs.range([30, 470], {value: 50, step: 1, label: "position"})
viewof col = Inputs.color({ value: "#e04a28", label: "couleur"})
viewof r = Inputs.range([5, 30], {value: 25, step: 0.1, label: "rayon"})

```

```{ojs}
//| echo: false
{
  const svg = d3
    .create("svg")
    .attr("viewBox", [0, 0, 500, 60])
    .style("background-color", "#CCC");
    
  svg
    .append("circle")
    .attr("cx", cx)
    .attr("cy", 30)
    .attr("r", r)
    .style("fill", col);
    
  return svg.node();
}
```

## Ajouter des donn√©es

L'ajout de donn√©es s'effectue avec l'instruction `FileAttachment()`

### üëâ fichier csv

```{ojs}
data1 = FileAttachment("data/afrika_data.csv").csv()
```

Les donn√©es sont import√©es et converties automatiquement au format json

```{ojs}
//| echo: false
data1
```

Pour les visualiser, on utilise `Inputs.table()`

```{ojs}
Inputs.table(data1)
```

### üëâ fichier xlsx

On peut √©galement importer des fichiers excel

```{ojs}
classeur = FileAttachment("data/afrika.xlsx").xlsx()
```

On obtient la liste des feuilles comme cela :

```{ojs}
classeur.sheetNames
```

Puis, on peut choisir la feuille √† ouvrir

```{ojs}
data2 = classeur.sheet("data", {
  headers: true
})
```

```{ojs}
//| echo: false
data2
```

### üëâ fichier geoJSON

Pour utiliser des g√©om√©tries, on utilisera prioritairement le format geoJSON.

```{ojs}
basemap = FileAttachment("data/africa.json").json()
```

Voil√† la structure d'un geoJSON

```{ojs}
//| echo: false
basemap
```

On peut le visualiser avec Leaflet

```{ojs}
{
  const container = yield htl.html`<div style="height: 500px;">`;
  const map = L.map(container).setView([0, 0], 3);
  L.geoJSON(basemap).addTo(map);
}
```

## Faire une carte avec D3.js

La fonction `d3.geoPath()` du module `d3.geo` permet de convertir un fond de carte en dessin svg. Cette fonction prend comme param√®tre des fonctions de projections telles que d√©finies dans les modules `d3.geo` & `d3.geoprojection`.

On importe des donn√©es

```{ojs}
monde = FileAttachment("data/world.json").json()
```

On d√©finit la fa√ßon dont on va transformer et afficher le geoJSON.

```{ojs}
myproj = d3.geoNaturalEarth1()
path = d3.geoPath(myproj)
```

Puis, on dessine la carte

```{ojs}
{
  const height = 500
  const svg = d3
    .create("svg")
    .attr("viewBox", [0, 0, width, height])
    .style("width", "100%")
    .style("height", "auto");

// La sph√®re
  svg
    .append("g")
    .append("path")
    .datum({ type: "Sphere" })
    .attr("fill", "#a9daeb")
    .attr("d", path); 

  // Les graticules
  svg
    .append("g")
    .append("path")
    .datum(d3.geoGraticule10())
    .attr("d", path) 
    .style("fill", "none")
    .style("stroke", "white")
    .style("stroke-width", 0.8)
    .style("stroke-opacity", 0.5)
    .style("stroke-dasharray", 2);

  // DATUM
  svg
    .append("g")
    .append("path")
    .datum(monde)
    .attr("fill", "#508bab")
    .attr("fill-opacity", 0.9)
    .attr("stroke", "white")
    .attr("stroke-width", 0.2)
    .attr("d", path); 

  return svg.node();
}
```

## Interop√©rabilit√© R et OJS

Dans `Quarto`, il est possible de combiner du code en R et du code en OJS.

Pour cela, on utilise la fonction `ojs_define()`

### Une simple variable

-   **chunks {r}**

On d√©finit la variable `myvar`

```{r}
myvar = 12
```

Puis, avec l'instruction ojs_define, on rend cette variable accessible en javascript.

```{r}
ojs_define(myvar)
```

-   **chunks {ojs}**

Et maintenant, `myvar` existe dans ojs.

```{r}
myvar
```

### Un dataframe

-   **chunks {r}**

Dans R, On charge un dataframe avec \`read.csv()\`\`

```{r}
data <- read.csv("data/afrika_data.csv")
```

Comme pr√©c√©demment, nous utilisons `ojs_define` pour rendre cette variable accessible dans Observable. Nous renommons cette variable en newdata.

```{r}
ojs_define(newdata = data)
```

-   **chunks {ojs}**

C√¥t√© ojs, les donn√©es sont disponibles. Elles ont √©t√© converties au format json. Mais elles ne sont pas tout √† fait au format attendu.

```{ojs}
newdata
```

La fonction transpose permet de les convertir au bon format.

```{ojs}
Inputs.table(transpose(newdata))
```

### Un Spatial dataframe

-   **chunks {r}**

Ici, on ouvre un fichier au format gpkg.

```{r}
library("sf")
countries <- st_read("data/countries.gpkg", quiet = T)
```

Puis, √† l'aide de la librarie `geojsonsf`, on le convertit au format geojson avant d'utiliser `ojs_define`

```{r}
library("geojsonsf")
ojs_define(countries = sf_geojson(countries))
```

-   **chunks {ojs}**

Notez qu'avec ojs_define, nous avons pass√© la variable geo comme une cha√Æne et non comme un objet.

```{ojs}
countries.substr(1, 300)
```

Nous utilisons l'instruction javascript `JSON.parse` pour refabriquer un geojson valide.

```{ojs}
countries2 = JSON.parse(countries) 
countries2
```

```{ojs}
{
  const container = yield htl.html`<div style="height: 500px;">`;
  const map = L.map(container).setView([0, 0], 2);
  L.geoJSON(countries2).addTo(map);
}
```

## Leaflet (L)

On peut faire une carte avec Leaflet en quelques lignes.

```{ojs}
{
  html`<link href="./lib/leaflet.css" rel="stylesheet" />`
  const container = yield  htl.html`<div style="height: 500px;">`;
  const map = L.map(container).setView([6.34, 2.08], 12);
  L.tileLayer("https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png", {}).addTo(
    map
  );
}
```

## Plot

C'est <ins>LA</ins> biblioth√®que JavaScript pour faire des graphiques (et m√™me des cartes).

### Les concepts

Il n'y a pas de type de graphique pr√©d√©fini, mais des marques, et des transformations qu'il est possible de combiner pour d√©ssiner n'importe quel type de graphique.

![](img/plot_concepts.png)

### Les marques

![](img/plot_marks.png)

### Les transformations

![](img/plot_transform.png)

### La sytaxe

```{ojs}
Plot.plot({
  marks: [
    Plot.rectY(olympians, Plot.binX({y: "count"}, {x: "weight"})),
    Plot.ruleY([0])
  ]
})
```

```{ojs}
Plot.plot({
  height: 180,
  marks: [Plot.dot(cars, Plot.dodgeY({ x: "weight (lb)" }))]
})
```

```{ojs}
Plot.plot({
  facet: {
    data: penguins,
    x: "species"
  },
  marks: [
    Plot.frame(),
    Plot.dot(penguins, { x: "culmen_length_mm", y: "culmen_depth_mm" })
  ]
})
```

## JavaScript ‚â† ojs

::: columns
::: {.column width="49%"}
OJS c'est du JavaScript + plein de biblioth√®ques pr√© charg√©es : <br/>

| Symbol   | Name              | Version            |
|----------|-------------------|--------------------|
| \_       | Lodash            | 4.17.21            |
| aq       | Arquero           | \${aq.version}     |
| Arrow    | Apache Arrow      | 4.0.1              |
| d3       | D3.js             | \${d3.version}     |
| dot      | Graphviz          | 0.2.1              |
| htl      | Hypertext Literal | \${htl.version}    |
| Inputs   | Observable Inputs | \${Inputs.version} |
| L        | Leaflet           | \${L.version}      |
| mermaid  | Mermaid           | 9.1.6              |
| Plot     | Observable Plot   | \${Plot.version}   |
| SQLite   | SQL.js            | 1.7.0              |
| topojson | TopoJSON Client   | 3.1.0              |
| vl       | Vega, Vega-Lite   | 5.22.1, 5.2.0      |
:::

::: {.column width="49%"}
OJS c'est aussi une √©volution du langage javascript pour en faire un langage adapt√© √† l'analyse et la visualisation de donn√©es sur le web.

![](img/datascience.png)
:::
:::

## Librairies externes

Observable javascript n'est pas un √©cosyst√®me ferm√©. Des millions de librairies javascript existent sur NPM (√©quivalent du CRAN pour R). Il est possible de les utiliser.

![](img/npm.png)<br/>

Ici, nous pouvons les importer directement avec l'instruction `require()`

#### La biblioth√®que `geocountries`

Avec `@`, on sp√©cifie la version de la biblioth√®que.

```{ojs}
geocountries = require("geocountries@2")
```

Vous pouvez aussi utiliser une biblioth√®que localement en sp√©cifiant le chemin sur votre ordinateur.

```{ojs}
geocountries2 = require("./lib/geocountries.js")
```

On peut maintenant utiliser la fonction getcode du package `geocountries`

```{ojs}
geocountries.getcode("B√©nin")
```

#### La biblioth√®que `statsbreaks`

Une biblioth√®que pour faire des discr√©tisations

```{ojs}
discr = require("./lib/statsbreaks.js")
gdppc = data1.map(d => d.PIB/d.POP)
discr.breaks({ values: gdppc, method: "quantile", nb: 5, precision: 2 })
```

## Imports

On l'a dit tout √† l'heure, Observable c'est aussi une plateforme web hebergeant des notebooks.

![](img/trendings.png)<br/>

Si on a une connexion internet, il ets possible d'importer n'importe quelle cellule de n'importe quel notebook avec la fonction `import`. Dit autrement, toutes les notebooks h√©berg√©s sur observablehq.com fonctionnent comme des api.

```{ojs}
import {SankeyChart} from "@d3/sankey"
import {energy} from "@d3/sankey"
```

Puis, on peut utiliser cette fonction.

```{ojs}
chart = SankeyChart({
  links: energy
}, {
  nodeGroup: d => d.id.split(/\W/)[0], // take first word for color
  width,
  height: 600
})
```

# La libraririe bertin

Une biblioth√®que JavaScript pour la cartographie th√©matique

## Principes

[bertin](https://github.com/neocarto/bertin) est une librairie (un ensemble de fonctionnalit√©s) √©crite en [javascript](https://developer.mozilla.org/fr/docs/Web/JavaScript) qui permet de r√©aliser des cartes th√©matiques pour le web. Son d√©veloppement s'appuie en grande partie sur le librairie javascript [d3.js](https://d3js.org/) d√©velopp√©e par Mike Bostock depuis 10 ans. Le d√©veloppement a d√©but√© en novembre 2021.

![](img/logobertin.svg)

On charge la biblioth√®que avec l'instruction \`require\`\`

```{ojs}
bertin = require("bertin@1.6")
```

Le principe de la biblioth√®que bertin est de proposer un outil permettant de r√©aliser rapidement des cartes th√©matiques vari√©es sans faire appel √† la programmation en JavaScript ni directement √† la biblioth√®que D3.js. ![](img/level.png)

Elle permet de r√©aliser de nombreux types de cartes th√©matiques.

![](img/gallery.png)

## Pr√©paration des donn√©es

Import des donn√©es sur les pays du monde

Les g√©om√©tries

```{ojs}
world = FileAttachment("data/world.json").json()
```

```{ojs}
//| echo: false
world
```

Les donn√©es attributaires

```{ojs}
stats = FileAttachment("data/worldbank_data.csv").csv()
```

On regarde les donn√©es

```{ojs}
Inputs.table(stats)
```

On ne garde que l'ann√©es 2019

```{ojs}
stats2019 = stats.filter(d => d.date == 2019)
```

```{ojs}
Inputs.table(stats2019)
```

On r√©alise une jointure gr√¢ce aux fonctionnalit√©s `match` et `merge` disponibles dans `bertin`.

```{ojs}
bertin.match(world, "id", stats2019, "iso3c")
```

Le niveau de compatibiliot√© est bon. On r√©alise la jointure et on cr√©e le nouveau jeu de donn√©es `world2019`

```{ojs}
world2019 = bertin.merge(world, "id", stats2019, "iso3c")
```

Voil√† le r√©sultat

```{ojs}
bertin.quickdraw(world2019)
Inputs.table(bertin.properties.table(world2019))
```

## Syntaxe

Avec `bertin`, on utilise la fonction `draw()` pour dessiner tous les types de cartes. La fonction prend en entr√©e un objet JavaScript contenant toutes les informations n√©c√©ssaires.

![](img/bertin_code.png)

## Types

Chaque couche √† afficher est d√©finie par un type particulier qui d√©finira le type de rendu.

![](img/types.jpeg){width:100%}

## Carte simple

La fonction `draw` permet de dessiner n'importe quel type de carte.

La syntaxe minimale est la suivante :

```{ojs}
bertin.draw({ layers: [ {geojson: world2019} ] })
```

## Symboles proportionnels

Pour r√©aliser une carte par symboles proportionnels, on utilise le type `bubble`

```{ojs}
bertin.draw({ layers: [ 
  {type: "bubble", geojson: world2019, values: "POP", fill: "red"}, 
  {geojson: world2019, fill:"#CCC"}
  ] })
```

Avec l'argument `dorling: true`, on obtient un cartogramme de Dorling.

```{ojs}
bertin.draw({ layers: [ 
  {type: "bubble", geojson: world2019, values: "POP", fill: "red", dorling:true}, 
  {geojson: world2019, fill:"#CCC"}
  ] })
```

En rempla√ßant `bubble` par `square`, on obtient des carr√©s.

```{ojs}
bertin.draw({ layers: [ 
  {type: "square", geojson: world2019, values: "POP", fill: "red"}, 
  {geojson: world2019, fill:"#CCC"}
  ] })
```

Grace au c√¥t√© r√©actif d'Observable Javascript, on va donc pouvoir facilement construire des cartes param√©trables.

```{ojs}
viewof k = Inputs.range([10, 100], {step: 1, value:50, label: "Rayon du plus grand cercle"})
viewof dorling = Inputs.toggle({label: "Dorling", value: false})
bertin.draw({ layers: [ 
  {type: "bubble", geojson: world2019, values: "POP", fill: "red", k, dorling}, 
  {geojson: world2019, fill:"#CCC"}
  ] })
```

## Typo & choro

Pour r√©aliser une typologie, on utilise le type `typo` sur le param√®tre `fill`.

```{ojs}
bertin.draw({ layers: [ 
  {geojson: world2019, fill: {type: "typo", values: "subregiond"} }
  ] })
```

Pour r√©aliser une carte choropl√®the, on utilise le type `choro` sur le param√®tre `fill`.

```{ojs}
world2019_2 = bertin.properties.add({
    geojson: world2019, 
    field: "GDPPC", 
    expression: "GDP/POP" 
})
bertin.draw({ layers: [ 
  {geojson: world2019_2, fill: {type: "choro", values: "GDPPC"} }
  ] })
```

## Combinaisons

On peut faire des combinaisons.

```{ojs}
bertin.draw({ layers: [ 
  {type: "bubble", geojson: world2019, values: "POP", fill: {type:"typo", values: "subregiond"}}, 
  {geojson: world2019, fill:"#CCC"}
  ] })
```

La librairie est tr√®s flexible. En changeant `fill` par `stroke`, on place les couleurs sur les contours.

```{ojs}
bertin.draw({ layers: [ 
  {type: "bubble", geojson: world2019, values: "POP", stroke: {type:"typo", values: "subregiond"}, strokeWidth:2, fill:"none"}, 
  {geojson: world2019, fill:"#CCC"}
  ] })
```

## Habillage

De nombreuses couches d'habillage sont disponibles.

```{ojs}
bertin.draw({ layers: [ 
  {type: "header", text: "Titre de la carte"},
  {type: "footer", text: "Sources et auteurs"},
  {geojson: world2019, fill:"white", stroke:"white"},
  {type: "shadow", geojson: world2019},
  {type: "geolines"},
  {type: "graticule"},
  {type: "outline"}
  ] })
```

Et on peut changer la projection.

```{ojs}

prj = ["InterruptedSinusoidal", "Armadillo", "Baker", "Gingery", "Berghaus","Loximuthal", "Healpix", "InterruptedMollweideHemispheres", "Miller", "Aitoff"]
viewof projection = Inputs.select(prj, {value: "InterruptedSinusoidal", label: "Projection"})
bertin.draw({ 
params: {projection, clip: true},
layers: [ 
  {type: "header", text: "Titre de la carte"},
  {type: "footer", text: "Sources et auteurs"},
  {geojson: world2019, fill:"white", stroke:"white"},
  {type: "shadow", geojson: world2019},
  {type: "geolines"},
  {type: "graticule"},
  {type: "outline"}
  ] })
```

## Documentation

-   Le code source et la documentation complete de la librairie `bertin` est disponible ici : <https://github.com/neocarto/bertin>

-   Toutes les versions de la librairies sont accesibles sur npm : <https://www.npmjs.com/package/bertin>

-   De nombreux exemples sont accessibles sur la plateforme Observable : [https://observablehq.com/collection/\@neocartocnrs/bertin](https://observablehq.com/collection/@neocartocnrs/bertin)

![](img/doc_observable.png){width:100%}<br/>

## Bonus : combiner `bertin` et `geotoolbox`

Quand on fait des cartes, on peut aussi avoir besoin de petite sop√©rations SIG simples (extractions des contours, agr√©gations, g√©n√©ralisation, centroides, etc.) C'est ce que permet de faire la librairie `geotoolbox`.

![](img/geotoolbox.png){100%}

On charge la biblioth√®que comme ceci :

```{ojs}
geo = require("geotoolbox@1.9.3")
```

On charge le fond de carte de l'Afrique

```{ojs}
afr = FileAttachment("data/africa.json").json()
```

### Exemple : Buffer + Clip

On selectionne le B√©nin et on construit un buffer autour du pays. La distance est g√©r√©e par un slider. On intersecte les pays avec le buffer. Le tout en temps r√©el.

```{ojs}
ben = geo.filter(afr, d => d.id == "BEN")
buff = geo.buffer(ben, { dist: distance })
clip = geo.clip(afr, { clip: buff })
```

```{ojs}
//| echo: false
viewof distance = Inputs.range([50, 2000], { label: "Buffer", step: 1, value : 100 })
```

```{ojs}
//| echo: false
mapclip1 = bertin.draw({
  params: {extent: afr},
  layers: [
    { type: "header", text: `${distance} km around Benin` },
    {
      geojson: ben,
      strokeWidth: 1.1,
      fill: "black"
    },
    {
      geojson: buff,
      strokeWidth: 3,
      stroke: "#a66ecc",
      fill: "none"
    },
     {
      geojson: clip,
      strokeWidth: 1,
      stroke: "white",
      fill: "#a66ecc"
    },
         {
      geojson: afr,
      strokeWidth: 5,
      stroke: "none",
      fill: "#CCC"
    },
    
    

  ]
})
```

# Exercices

Mise en pratique de `bertin` dans Quarto

::: header
## 

<br/><br/>

### Exercices

<br/><br/>

::: columns
::: {.column width="49%"}
<b>TP1</b><br/><br/> Exercice pour apprendre √† r√©aliser des cartes interactives avec Quarto et la biblioth√®que JavaScript bertin.<br/><br/> <https://ee-cist.github.io/CART3_cartodyn/TP1/docs/index.html>
:::

::: {.column width="49%"}
<b>TP2</b><br/><br/> Exercice pour apprendre √† realiser une single page application avec bertin et Quarto.<br/><br/><https://ee-cist.github.io/CART3_cartodyn/TP2/docs/index.html>
:::
:::
:::

::: header
## 

<br/><br/>

### Document r√©alis√© avec Quarto.<br/><br/>

<b>Voir en ligne</b><br/>[ee-cist.github.io/CART3_cartodyn/intro/docs](https://ee-cist.github.io/CART3_cartodyn/intro/docs/index.html)

<b>Code source</b><br/> [github.com/EE-CIST/CART3_cartodyn/tree/main/intro](https://github.com/EE-CIST/CART3_cartodyn/tree/main/intro)

<br/>

### Contacts

::: columns
::: {.column width="49%"}
<b>Nicolas Lambert<br/>(France)</b><br/><br/> *nicolas.lambert\@cnrs.fr*<br/>https://twitter.com/neocartocnrs<br/>https://vis.social/@neocarto <br/>https://github.com/neocarto<br/>https://observablehq.com/@neocartocnrs
:::

::: {.column width="49%"}
<b>Manhamady Puedraogo<br/>(Burkina Faso)</b><br/><br/> *nonresse\@gmail.com*
:::
:::
:::

